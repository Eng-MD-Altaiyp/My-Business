
  userLogin(var data,int index) async {
    var data = {
      'uname': user.text,
      'password': password.text,
    };
    String url = "http://$URL_IP/PHP/MyBusiness/AppFile/user_login.php";
    final response = await http.post(Uri.parse(url), body: json.encode(data));

    if (!response.persistentConnection) {
      con("Verify That The Server is Running   (Error 504).", "assets/icons/info-circle.svg", color3);
      return null;
    } else if (response.persistentConnection) {
      if (response.statusCode == 200) {
        //Server response into variable
        print(response.body);
        var msg = jsonDecode(response.body);
        if (msg['loginStatus'] == true) {
          setState(
                () async{
                  var data = {
                    'id': data[index]['id'],
                  };
                  String url = "http://$URL_IP/PHP/MyBusiness/AppFile/deleteData.php";
                  final responsed = await http.post(Uri.parse(url), body: json.encode(data));

                  if (!responsed.persistentConnection) {
                    con("Verify That The Server is Running   (Error 504).", "assets/icons/info-circle.svg", color3);
                    return null;
                  } else if (responsed.persistentConnection) {
                    if (responsed.statusCode == 200) {
                      //Server response into variable
                      print(responsed.body);
                      var msg = jsonDecode(responsed.body);
                      if (msg['loginStatus'] == true) {
                        setState(
                              () {
                                con("Deleted.", "assets/icons/order-sent-successfully.svg", color3);
                          },
                        );
                      } else {
                        setState(
                              () {
                            con("This Account is Not.", "assets/icons/info-circle.svg", color4);
                          },
                        );
                      }
                    }
                  };
            },
          );
        } else {
          setState(
                () {
              con("This Account is Not.", "assets/icons/info-circle.svg", color4);
            },
          );
        }
      }
    };
  }























  TextEditingController user = TextEditingController();
  TextEditingController password = TextEditingController();


  Widget showMessagedelete(var data,int index) {
    return Dialog(
      backgroundColor: Colors.transparent,
      child: Container(
        width: 160,
        child: Card(
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(4),
          ),
          color: color1,
          clipBehavior: Clip.antiAliasWithSaveLayer,
          child: Wrap(
            children: <Widget>[
              Container(
                padding:
                EdgeInsets.only(top: 20, bottom: 20, right: 8, left: 8),
                width: double.infinity,
                color: color3,
                child: Form(
                  key: _formKey,
                  child: Column(
                    children: [
                      Container(
                        alignment: Alignment.center,
                        margin: EdgeInsets.only(top: 20),
                        padding: EdgeInsets.only(left: 20, right: 20),
                        height: 65,
                        decoration: BoxDecoration(
                          borderRadius: BorderRadius.circular(10),
                          color: Color(0xffffffff),
                        ),
                        child: TextFormField(
                          validator: (value) {
                            if (value == null || value.isEmpty) {
                              return 'Please Enter User Name';
                            }
                            if (value.length < 2) {
                              return 'User Name must be at least 1 characters';
                            } else
                              return null;
                          },
                          controller: user,
                          keyboardType: TextInputType.name,
                          decoration: InputDecoration(
                            border: InputBorder.none,
                            hintText: " User Name ",
                            hintStyle: TextStyle(
                              color: Colors.grey[400],
                            ),
                            prefixIcon: Icon(Icons.person,color: color3p,)
                          ),
                        ),
                      ),



                      Container(
                        alignment: Alignment.center,
                        margin: EdgeInsets.only(top: 20),
                        padding: EdgeInsets.only(left: 20, right: 20),
                        height: 65,
                        decoration: BoxDecoration(
                          borderRadius: BorderRadius.circular(10),
                          color: Color(0xffffffff),
                        ),
                        child: TextFormField(
                          validator: (value) {
                            if (value == null || value.isEmpty) {
                              return 'Please Enter Password';
                            }
                            if (value.length < 2) {
                              return 'Password must be at least 1 characters';
                            } else
                              return null;
                          },

                          controller: password,
                          keyboardType: TextInputType.name,
                          decoration: InputDecoration(
                            border: InputBorder.none,
                            hintText: " Password ",
                            hintStyle: TextStyle(
                              color: Colors.grey[400],
                            ),
                            prefixIcon: Icon(Icons.key,color: color3p,)
                          ),
                        ),
                      ),
                    ],
                  ),
                ),
              ),

              Container(
                padding: EdgeInsets.all(20),
                width: double.infinity,
                child: Column(
                  children: <Widget>[
                    Text("Enter The Connected Amount With The Previous Amount",
                        textAlign: TextAlign.center,
                        style: Theme.of(context)
                            .textTheme
                            .subtitle1
                            ?.copyWith(color: Color(0xFF666666))),
                    SizedBox(
                      height: 10,
                    ),
                    Row(
                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
                      children: [
                        ElevatedButton(
                          onPressed: () {
                            setState(() {
                              if (_formKey.currentState!.validate()) {
                                Navigator.of(context).pop();
                                userLogin(data,index);
                                user.clear();
                                password.clear();
                              }
                            });
                          },
                          child: Text("OK"),
                          style: ElevatedButton.styleFrom(
                              backgroundColor: color5p),
                        ),
                        ElevatedButton(
                          onPressed: () {
                            setState(() {
                              Navigator.pop(context);
                            });
                          },
                          child: Text("Cancel"),
                          style: ElevatedButton.styleFrom(
                              backgroundColor: color5p),
                        ),
                      ],
                    )
                  ],
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
  



